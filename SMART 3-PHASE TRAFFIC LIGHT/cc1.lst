
AVRASM ver. 2.1.30  C:\Users\Dorina\Documents\Facultate\An III\Semestrul 2 an 3\Proiect 2\MS SS\cc1.asm Wed Jun 08 19:15:13 2022

C:\Users\Dorina\Documents\Facultate\An III\Semestrul 2 an 3\Proiect 2\MS SS\cc1.asm(1422): warning: Register r3 already defined by the .DEF directive
C:\Users\Dorina\Documents\Facultate\An III\Semestrul 2 an 3\Proiect 2\MS SS\cc1.asm(1423): warning: Register r2 already defined by the .DEF directive
C:\Users\Dorina\Documents\Facultate\An III\Semestrul 2 an 3\Proiect 2\MS SS\cc1.asm(1424): warning: Register r5 already defined by the .DEF directive
C:\Users\Dorina\Documents\Facultate\An III\Semestrul 2 an 3\Proiect 2\MS SS\cc1.asm(1425): warning: Register r4 already defined by the .DEF directive
C:\Users\Dorina\Documents\Facultate\An III\Semestrul 2 an 3\Proiect 2\MS SS\cc1.asm(1426): warning: Register r7 already defined by the .DEF directive
C:\Users\Dorina\Documents\Facultate\An III\Semestrul 2 an 3\Proiect 2\MS SS\cc1.asm(1427): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.48b 
                 ;(C) Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : No
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 	.EQU GPIOR1=0x2A
                 	.EQU GPIOR2=0x2B
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R3
                 	.DEF _rx_rd_index0=R2
                 	.DEF _rx_counter0=R5
                 	.DEF _tx_wr_index0=R4
                 	.DEF _tx_rd_index0=R7
                 	.DEF _tx_counter0=R6
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 00d8 	JMP  _timer1_compa_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0093 	JMP  _usart0_rx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 00c3 	JMP  _usart0_tx_isr
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00003e 2710
00003f 03e8
000040 0064
000041 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000042 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000043 1000
000044 0100
000045 0010
000046 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0xD6:
000047 0000
000048 0000
000049 0000
00004a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004b 0000
00004c 0000
00004d 0000
00004e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x2040060:
C:\Users\Dorina\Documents\Facultate\An III\Semestrul 2 an 3\Proiect 2\MS SS\cc1.asm(1483): warning: .cseg .db misalignment - padding zero byte
00004f 0001      	.DB  0x1
                 _0x2040000:
000050 4e2d
000051 4e41
000052 4900
000053 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Dorina\Documents\Facultate\An III\Semestrul 2 an 3\Proiect 2\MS SS\cc1.asm(1486): warning: .cseg .db misalignment - padding zero byte
000054 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000055 0001      	.DW  0x01
000056 0210      	.DW  __seed_G102
000057 009e      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bff5      	OUT  MCUCR,R31
00005e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005f e1f8      	LDI  R31,0x18
000060 95a8      	WDR
000061 b7a4      	IN   R26,MCUSR
000062 7fa7      	CBR  R26,8
000063 bfa4      	OUT  MCUSR,R26
000064 93f0 0060 	STS  WDTCSR,R31
000066 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000068 e08d      	LDI  R24,(14-2)+1
000069 e0a2      	LDI  R26,2
00006a 27bb      	CLR  R27
                 __CLEAR_REG:
00006b 93ed      	ST   X+,R30
00006c 958a      	DEC  R24
00006d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000070 e0a0      	LDI  R26,LOW(__SRAM_START)
000071 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000072 93ed      	ST   X+,R30
000073 9701      	SBIW R24,1
000074 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000075 eaea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000076 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000077 9185      	LPM  R24,Z+
000078 9195      	LPM  R25,Z+
000079 9700      	SBIW R24,0
00007a f061      	BREQ __GLOBAL_INI_END
00007b 91a5      	LPM  R26,Z+
00007c 91b5      	LPM  R27,Z+
00007d 9005      	LPM  R0,Z+
00007e 9015      	LPM  R1,Z+
00007f 01bf      	MOVW R22,R30
000080 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000081 9005      	LPM  R0,Z+
000082 920d      	ST   X+,R0
000083 9701      	SBIW R24,1
000084 f7e1      	BRNE __GLOBAL_INI_LOOP
000085 01fb      	MOVW R30,R22
000086 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000087 e0e0      	LDI  R30,__GPIOR0_INIT
000088 bbee      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000089 bdea      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
00008a bdeb      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008c bfed      	OUT  SPL,R30
00008d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000090 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000091 940c 0185 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x01
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;interrupt [21] void usart0_rx_isr(void)
                 ; 0000 0049 {
                 
                 	.CSEG
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
000093 d20a      	RCALL SUBOPT_0x0
                 ; 0000 004A char status,data;
                 ; 0000 004B status=UCSR0A;
000094 931a      	ST   -Y,R17
000095 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000096 9110 00c0 	LDS  R17,192
                 ; 0000 004C data=UDR0;
000098 9100 00c6 	LDS  R16,198
                 ; 0000 004D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00009a 2fe1      	MOV  R30,R17
00009b 71ec      	ANDI R30,LOW(0x1C)
00009c f481      	BRNE _0x3
                 ; 0000 004E {
                 ; 0000 004F rx_buffer0[rx_wr_index0++]=data;
00009d 2de3      	MOV  R30,R3
00009e 9433      	INC  R3
00009f e0f0      	LDI  R31,0
0000a0 50e0      	SUBI R30,LOW(-_rx_buffer0)
0000a1 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
0000a2 8300      	ST   Z,R16
                 ; 0000 0050 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0051 // special case for receiver buffer size=256
                 ; 0000 0052 if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0053 #else
                 ; 0000 0054 if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0000a3 e0e8      	LDI  R30,LOW(8)
0000a4 15e3      	CP   R30,R3
0000a5 f409      	BRNE _0x4
0000a6 2433      	CLR  R3
                 ; 0000 0055 if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x4:
0000a7 9453      	INC  R5
0000a8 e0e8      	LDI  R30,LOW(8)
0000a9 15e5      	CP   R30,R5
0000aa f411      	BRNE _0x5
                 ; 0000 0056 {
                 ; 0000 0057 rx_counter0=0;
0000ab 2455      	CLR  R5
                 ; 0000 0058 rx_buffer_overflow0=1;
0000ac 9af0      	SBI  0x1E,0
                 ; 0000 0059 }
                 ; 0000 005A #endif
                 ; 0000 005B }
                 _0x5:
                 ; 0000 005C }
                 _0x3:
0000ad 9109      	LD   R16,Y+
0000ae 9119      	LD   R17,Y+
0000af c023      	RJMP _0xFB
                 ; .FEND
                 ;char getchar(void)
                 ; 0000 0063 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0064 char data;
                 ; 0000 0065 while (rx_counter0==0);
0000b0 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x8:
0000b1 2055      	TST  R5
0000b2 f3f1      	BREQ _0x8
                 ; 0000 0066 data=rx_buffer0[rx_rd_index0++];
0000b3 2de2      	MOV  R30,R2
0000b4 9423      	INC  R2
0000b5 e0f0      	LDI  R31,0
0000b6 50e0      	SUBI R30,LOW(-_rx_buffer0)
0000b7 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
0000b8 8110      	LD   R17,Z
                 ; 0000 0067 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0068 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0000b9 e0e8      	LDI  R30,LOW(8)
0000ba 15e2      	CP   R30,R2
0000bb f409      	BRNE _0xB
0000bc 2422      	CLR  R2
                 ; 0000 0069 #endif
                 ; 0000 006A #asm("cli")
                 _0xB:
0000bd 94f8      	CLI
                 ; 0000 006B --rx_counter0;
0000be 945a      	DEC  R5
                 ; 0000 006C #asm("sei")
0000bf 9478      	SEI
                 ; 0000 006D return data;
0000c0 2fe1      	MOV  R30,R17
0000c1 9119      	LD   R17,Y+
0000c2 9508      	RET
                 ; 0000 006E }
                 ; .FEND
                 ;interrupt [23] void usart0_tx_isr(void)
                 ; 0000 007E {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
0000c3 d1da      	RCALL SUBOPT_0x0
                 ; 0000 007F if (tx_counter0)
0000c4 2066      	TST  R6
0000c5 f069      	BREQ _0xC
                 ; 0000 0080 {
                 ; 0000 0081 --tx_counter0;
0000c6 946a      	DEC  R6
                 ; 0000 0082 UDR0=tx_buffer0[tx_rd_index0++];
0000c7 2de7      	MOV  R30,R7
0000c8 9473      	INC  R7
0000c9 e0f0      	LDI  R31,0
0000ca 5fe8      	SUBI R30,LOW(-_tx_buffer0)
0000cb 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0000cc 81e0      	LD   R30,Z
0000cd 93e0 00c6 	STS  198,R30
                 ; 0000 0083 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0084 if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0000cf e0e8      	LDI  R30,LOW(8)
0000d0 15e7      	CP   R30,R7
0000d1 f409      	BRNE _0xD
0000d2 2477      	CLR  R7
                 ; 0000 0085 #endif
                 ; 0000 0086 }
                 _0xD:
                 ; 0000 0087 }
                 _0xC:
                 _0xFB:
0000d3 91e9      	LD   R30,Y+
0000d4 bfef      	OUT  SREG,R30
0000d5 91f9      	LD   R31,Y+
0000d6 91e9      	LD   R30,Y+
0000d7 9518      	RETI
                 ; .FEND
                 ;void putchar(char c)
                 ; 0000 008E {
                 ; 0000 008F while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 ; 0000 0090 #asm("cli")
                 ; 0000 0091 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
                 ; 0000 0092 {
                 ; 0000 0093 tx_buffer0[tx_wr_index0++]=c;
                 ; 0000 0094 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0095 if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
                 ; 0000 0096 #endif
                 ; 0000 0097 ++tx_counter0;
                 ; 0000 0098 }
                 ; 0000 0099 else
                 ; 0000 009A UDR0=c;
                 ; 0000 009B #asm("sei")
                 ; 0000 009C }
                 ;interrupt [14] void timer1_compa_isr(void)
                 ; 0000 00A9 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
                 ; 0000 00AA LED1 = ~LED1; // invert LED
0000d8 9b5e      	SBIS 0xB,6
0000d9 c002      	RJMP _0x16
0000da 985e      	CBI  0xB,6
0000db c001      	RJMP _0x17
                 _0x16:
0000dc 9a5e      	SBI  0xB,6
                 _0x17:
                 ; 0000 00AB }
0000dd 9518      	RETI
                 ; .FEND
                 ;void etapa1()
                 ; 0000 00AE {                      //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
                 _etapa1:
                 ; .FSTART _etapa1
                 ; 0000 00AF LMS2A_V = LOW;
0000de 982e      	CBI  0x5,6
                 ; 0000 00B0 LMS2A_R = HIGH;
0000df 9a40      	SBI  0x8,0
                 ; 0000 00B1 
                 ; 0000 00B2 delay_ms(1500);  //LA TERMINAREA CICLULUI MAI INTAI SE FACE ROSU PE STRADA 2A IAR CULORILE CELORLALTE SEMAFOARE COMUTA DUPA O INTARZIERE DE 2 SECUNDE
0000e0 d1c2      	RCALL SUBOPT_0x1
                 ; 0000 00B3 //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSIE
                 ; 0000 00B4 LPS1_V = LOW;
                 ; 0000 00B5 LPS1_R = HIGH;
                 ; 0000 00B6 //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSIE
                 ; 0000 00B7 LPS2_V = LOW;
0000e1 d1c7      	RCALL SUBOPT_0x2
                 ; 0000 00B8 LPS2_R = HIGH;
                 ; 0000 00B9 //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 00BA LMS2B_V = LOW;
                 ; 0000 00BB LMS2B_R = HIGH;
                 ; 0000 00BC //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 00BD LMS1_V = HIGH;
                 ; 0000 00BE LMS1_R = LOW;
0000e2 982d      	CBI  0x5,5
                 ; 0000 00BF }
0000e3 9508      	RET
                 ; .FEND
                 ;void etapa2()
                 ; 0000 00C2 {                      //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
                 _etapa2:
                 ; .FSTART _etapa2
                 ; 0000 00C3 LMS2A_V = LOW;
0000e4 982e      	CBI  0x5,6
                 ; 0000 00C4 LMS2A_R = HIGH;
0000e5 9a40      	SBI  0x8,0
                 ; 0000 00C5 //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSIE
                 ; 0000 00C6 LPS1_V = LOW;
0000e6 9828      	CBI  0x5,0
                 ; 0000 00C7 LPS1_R = HIGH;
0000e7 9a29      	SBI  0x5,1
                 ; 0000 00C8 //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSIE
                 ; 0000 00C9 LPS2_V = LOW;
0000e8 d1c0      	RCALL SUBOPT_0x2
                 ; 0000 00CA LPS2_R = HIGH;
                 ; 0000 00CB //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 00CC LMS2B_V = LOW;
                 ; 0000 00CD LMS2B_R = HIGH;
                 ; 0000 00CE //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA GABLBEN
                 ; 0000 00CF LMS1_V = HIGH;
                 ; 0000 00D0 LMS1_R = HIGH;
0000e9 9a2d      	SBI  0x5,5
                 ; 0000 00D1 }
0000ea 9508      	RET
                 ; .FEND
                 ;void etapa3()
                 ; 0000 00D4 {                       //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
                 _etapa3:
                 ; .FSTART _etapa3
                 ; 0000 00D5 LMS1_V = LOW;
0000eb 982c      	CBI  0x5,4
                 ; 0000 00D6 LMS1_R = HIGH;
0000ec 9a2d      	SBI  0x5,5
                 ; 0000 00D7 
                 ; 0000 00D8 delay_ms(1500);  //DUPA CE SE FACE ROSU PE STRADA 1, CULORILE CELORLALTE SEMAFOARE COMUTA DUPA 2 SECUNDE
0000ed edac      	LDI  R26,LOW(1500)
0000ee e0b5      	LDI  R27,HIGH(1500)
0000ef d24a      	RCALL _delay_ms
                 ; 0000 00D9 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 00DA LMS2A_V = LOW;
0000f0 982e      	CBI  0x5,6
                 ; 0000 00DB LMS2A_R = HIGH;
0000f1 9a40      	SBI  0x8,0
                 ; 0000 00DC //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA VERDE
                 ; 0000 00DD LPS1_V = HIGH;
0000f2 9a28      	SBI  0x5,0
                 ; 0000 00DE LPS1_R = LOW;
0000f3 9829      	CBI  0x5,1
                 ; 0000 00DF //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSIE
                 ; 0000 00E0 LPS2_V = LOW;
0000f4 982a      	CBI  0x5,2
                 ; 0000 00E1 LPS2_R = HIGH;
0000f5 9a2b      	SBI  0x5,3
                 ; 0000 00E2 //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA VERDE
                 ; 0000 00E3 LMS2B_V = HIGH;
0000f6 9a41      	SBI  0x8,1
                 ; 0000 00E4 LMS2B_R = LOW;
0000f7 9842      	CBI  0x8,2
                 ; 0000 00E5 
                 ; 0000 00E6 }
0000f8 9508      	RET
                 ; .FEND
                 ;void etapa4()
                 ; 0000 00E9 {                       //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSU
                 _etapa4:
                 ; .FSTART _etapa4
                 ; 0000 00EA LPS1_V = LOW;
0000f9 d1b5      	RCALL SUBOPT_0x3
                 ; 0000 00EB LPS1_R = HIGH;
                 ; 0000 00EC //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSU
                 ; 0000 00ED LPS2_V = LOW;
                 ; 0000 00EE LPS2_R = HIGH;
                 ; 0000 00EF //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 00F0 LMS1_V = LOW;
                 ; 0000 00F1 LMS1_R = HIGH;
                 ; 0000 00F2 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 00F3 LMS2A_V = LOW;
                 ; 0000 00F4 LMS2A_R = HIGH;
                 ; 0000 00F5 
                 ; 0000 00F6 //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA VERDE
                 ; 0000 00F7 LMS2B_V = HIGH;
                 ; 0000 00F8 LMS2B_R = LOW;
0000fa 9842      	CBI  0x8,2
                 ; 0000 00F9 
                 ; 0000 00FA delay_ms(4000);
0000fb eaa0      	LDI  R26,LOW(4000)
0000fc e0bf      	LDI  R27,HIGH(4000)
0000fd d23c      	RCALL _delay_ms
                 ; 0000 00FB }
0000fe 9508      	RET
                 ; .FEND
                 ;void etapa5()
                 ; 0000 00FF {                       //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSU
                 _etapa5:
                 ; .FSTART _etapa5
                 ; 0000 0100 LPS1_V = LOW;
0000ff d1af      	RCALL SUBOPT_0x3
                 ; 0000 0101 LPS1_R = HIGH;
                 ; 0000 0102 //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSU
                 ; 0000 0103 LPS2_V = LOW;
                 ; 0000 0104 LPS2_R = HIGH;
                 ; 0000 0105 //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 0106 LMS1_V = LOW;
                 ; 0000 0107 LMS1_R = HIGH;
                 ; 0000 0108 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 0109 LMS2A_V = LOW;
                 ; 0000 010A LMS2A_R = HIGH;
                 ; 0000 010B 
                 ; 0000 010C //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA GALBEN
                 ; 0000 010D LMS2B_V = HIGH;
                 ; 0000 010E LMS2B_R = HIGH;
000100 c011      	RJMP _0x20A0004
                 ; 0000 010F }
                 ; .FEND
                 ;void etapa6()
                 ; 0000 0112 {                        //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA ROSIE
                 _etapa6:
                 ; .FSTART _etapa6
                 ; 0000 0113 LMS2B_V = LOW;
000101 9841      	CBI  0x8,1
                 ; 0000 0114 LMS2B_R = HIGH;
000102 9a42      	SBI  0x8,2
                 ; 0000 0115 
                 ; 0000 0116 delay_ms(1500);   //DUPA CE SE FACE ROSU PE STRADA 2B, CULORILE CELORLALTE SEMAFOARE COMUTA DUPA 2 SECUNDE
000103 d19f      	RCALL SUBOPT_0x1
                 ; 0000 0117 //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSU
                 ; 0000 0118 LPS1_V = LOW;
                 ; 0000 0119 LPS1_R = HIGH;
                 ; 0000 011A //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA VERDE
                 ; 0000 011B LPS2_V = HIGH;
000104 9a2a      	SBI  0x5,2
                 ; 0000 011C LPS2_R = LOW;
000105 982b      	CBI  0x5,3
                 ; 0000 011D //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 011E LMS1_V = LOW;
000106 982c      	CBI  0x5,4
                 ; 0000 011F LMS1_R = HIGH;
000107 9a2d      	SBI  0x5,5
                 ; 0000 0120 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 0121 LMS2A_V = LOW;
000108 982e      	CBI  0x5,6
                 ; 0000 0122 LMS2A_R = HIGH;
000109 c013      	RJMP _0x20A0003
                 ; 0000 0123 }
                 ; .FEND
                 ;void etapa7()
                 ; 0000 0126 {                      //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSU
                 _etapa7:
                 ; .FSTART _etapa7
                 ; 0000 0127 LPS2_V = LOW;
00010a 982a      	CBI  0x5,2
                 ; 0000 0128 LPS2_R = HIGH;
00010b 9a2b      	SBI  0x5,3
                 ; 0000 0129 
                 ; 0000 012A delay_ms(1500);  //DUPA CE SE FACE ROSU LA PIETONII DE PE STRADA 2, CULORILE CELORLALTE SEMAFOARE COMUTA DUPA 2 SECUNDE
00010c d196      	RCALL SUBOPT_0x1
                 ; 0000 012B //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSU
                 ; 0000 012C LPS1_V = LOW;
                 ; 0000 012D LPS1_R = HIGH;
                 ; 0000 012E //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 012F LMS1_V = LOW;
00010d 982c      	CBI  0x5,4
                 ; 0000 0130 LMS1_R = HIGH;
00010e 9a2d      	SBI  0x5,5
                 ; 0000 0131 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA VERDE
                 ; 0000 0132 LMS2A_V = HIGH;
00010f 9a2e      	SBI  0x5,6
                 ; 0000 0133 LMS2A_R = LOW;
000110 9840      	CBI  0x8,0
                 ; 0000 0134 //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 0135 LMS2B_V = LOW;
000111 9841      	CBI  0x8,1
                 ; 0000 0136 LMS2B_R = HIGH;
                 _0x20A0004:
000112 9a42      	SBI  0x8,2
                 ; 0000 0137 }
000113 9508      	RET
                 ; .FEND
                 ;void etapa8()
                 ; 0000 013A {                       //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSU
                 _etapa8:
                 ; .FSTART _etapa8
                 ; 0000 013B LPS2_V = LOW;
000114 982a      	CBI  0x5,2
                 ; 0000 013C LPS2_R = HIGH;
000115 9a2b      	SBI  0x5,3
                 ; 0000 013D //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSU
                 ; 0000 013E LPS1_V = LOW;
000116 9828      	CBI  0x5,0
                 ; 0000 013F LPS1_R = HIGH;
000117 9a29      	SBI  0x5,1
                 ; 0000 0140 //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 0141 LMS1_V = LOW;
000118 982c      	CBI  0x5,4
                 ; 0000 0142 LMS1_R = HIGH;
000119 9a2d      	SBI  0x5,5
                 ; 0000 0143 //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA ROSIE
                 ; 0000 0144 LMS2B_V = LOW;
00011a 9841      	CBI  0x8,1
                 ; 0000 0145 LMS2B_R = HIGH;
00011b 9a42      	SBI  0x8,2
                 ; 0000 0146 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA GALBEN
                 ; 0000 0147 LMS2A_V = HIGH;
00011c 9a2e      	SBI  0x5,6
                 ; 0000 0148 LMS2A_R = HIGH;
                 _0x20A0003:
00011d 9a40      	SBI  0x8,0
                 ; 0000 0149 }
00011e 9508      	RET
                 ; .FEND
                 ;void flash_PS1()
                 ; 0000 014E //cand timpul pentru traversare este aproape de final
                 ; 0000 014F {
                 _flash_PS1:
                 ; .FSTART _flash_PS1
                 ; 0000 0150 int initialState = LPS1_V;   //retinem starea culorii verzi a semafoarelor pentru pietonii de pe strada 1
                 ; 0000 0151 int i = 0;
                 ; 0000 0152 for(i = 0 ; i < 4; i++)     //prin parcurgerea buclei for asiguram aprinderea si stingerea led-ului de 4 ori
00011f d1df      	RCALL __SAVELOCR4
                 ;	initialState -> R16,R17
                 ;	i -> R18,R19
000120 e0e0      	LDI  R30,0
000121 9928      	SBIC 0x5,0
000122 e0e1      	LDI  R30,1
000123 d195      	RCALL SUBOPT_0x4
                +
000124 e020     +LDI R18 , LOW ( 0 )
000125 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0xB9:
                +
000126 3024     +CPI R18 , LOW ( 4 )
000127 e0e0     +LDI R30 , HIGH ( 4 )
000128 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
000129 f45c      	BRGE _0xBA
                 ; 0000 0153 {
                 ; 0000 0154 LPS1_V = LOW;
00012a 9828      	CBI  0x5,0
                 ; 0000 0155 delay_ms(500);
00012b efa4      	LDI  R26,LOW(500)
00012c e0b1      	LDI  R27,HIGH(500)
00012d d20c      	RCALL _delay_ms
                 ; 0000 0156 LPS1_V = HIGH;
00012e 9a28      	SBI  0x5,0
                 ; 0000 0157 delay_ms(500);
00012f efa4      	LDI  R26,LOW(500)
000130 e0b1      	LDI  R27,HIGH(500)
000131 d208      	RCALL _delay_ms
                 ; 0000 0158 }
                +
000132 5f2f     +SUBI R18 , LOW ( - 1 )
000133 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000134 cff1      	RJMP _0xB9
                 _0xBA:
                 ; 0000 0159 LPS1_V = initialState;
000135 3000      	CPI  R16,0
000136 f411      	BRNE _0xBF
000137 9828      	CBI  0x5,0
000138 c001      	RJMP _0xC0
                 _0xBF:
000139 9a28      	SBI  0x5,0
                 _0xC0:
                 ; 0000 015A }
00013a c019      	RJMP _0x20A0002
                 ; .FEND
                 ;void flash_PS2()
                 ; 0000 015D //cand timpul pentru traversare este aproape de final
                 ; 0000 015E {
                 _flash_PS2:
                 ; .FSTART _flash_PS2
                 ; 0000 015F int initialState = LPS2_V;   //retinem starea culorii verzi a semafoarelor pentru pietonii de pe strada 2
                 ; 0000 0160 int i;
                 ; 0000 0161 for(i = 0 ; i < 4; i++)     //prin parcurgerea buclei for asiguram aprinderea si stingerea led-ului de 4 ori
00013b d1c3      	RCALL __SAVELOCR4
                 ;	initialState -> R16,R17
                 ;	i -> R18,R19
00013c e0e0      	LDI  R30,0
00013d 992a      	SBIC 0x5,2
00013e e0e1      	LDI  R30,1
00013f d179      	RCALL SUBOPT_0x4
                 _0xC2:
                +
000140 3024     +CPI R18 , LOW ( 4 )
000141 e0e0     +LDI R30 , HIGH ( 4 )
000142 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
000143 f45c      	BRGE _0xC3
                 ; 0000 0162 {
                 ; 0000 0163 LPS2_V = LOW;
000144 982a      	CBI  0x5,2
                 ; 0000 0164 delay_ms(500);
000145 efa4      	LDI  R26,LOW(500)
000146 e0b1      	LDI  R27,HIGH(500)
000147 d1f2      	RCALL _delay_ms
                 ; 0000 0165 LPS2_V = HIGH;
000148 9a2a      	SBI  0x5,2
                 ; 0000 0166 delay_ms(500);
000149 efa4      	LDI  R26,LOW(500)
00014a e0b1      	LDI  R27,HIGH(500)
00014b d1ee      	RCALL _delay_ms
                 ; 0000 0167 }
                +
00014c 5f2f     +SUBI R18 , LOW ( - 1 )
00014d 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00014e cff1      	RJMP _0xC2
                 _0xC3:
                 ; 0000 0168 LPS2_V = initialState;
00014f 3000      	CPI  R16,0
000150 f411      	BRNE _0xC8
000151 982a      	CBI  0x5,2
000152 c001      	RJMP _0xC9
                 _0xC8:
000153 9a2a      	SBI  0x5,2
                 _0xC9:
                 ; 0000 0169 }
                 _0x20A0002:
000154 d1af      	RCALL __LOADLOCR4
000155 9624      	ADIW R28,4
000156 9508      	RET
                 ; .FEND
                 ;int get_delay (char arg) {
                 ; 0000 016B int get_delay (char arg) {
                 _get_delay:
                 ; .FSTART _get_delay
                 ; 0000 016C switch(arg) {               //switch-ul functioneaza doar cu numere, iar noi chiar daca ii dam un caracter, el o sa foloseasca coduri ASCII
000157 93aa      	ST   -Y,R26
                 ;	arg -> Y+0
000158 81e8      	LD   R30,Y
                 ; 0000 016D case '1': return 15;      //daca se introduce in terminal '1', functia returneaza o durata de 15 secunde (10% din ciclul de 2 minute si 30 sec = 150 sec)
000159 33e1      	CPI  R30,LOW(0x31)
00015a f419      	BRNE _0xCD
00015b e0ef      	LDI  R30,LOW(15)
00015c e0f0      	LDI  R31,HIGH(15)
00015d c025      	RJMP _0x20A0001
                 ; 0000 016E case '2': return 30;      //daca se introduce in terminal '2', functia returneaza o durata de 30 secunde (20% din ciclul de 2 minute si 30 sec)
                 _0xCD:
00015e 33e2      	CPI  R30,LOW(0x32)
00015f f419      	BRNE _0xCE
000160 e1ee      	LDI  R30,LOW(30)
000161 e0f0      	LDI  R31,HIGH(30)
000162 c020      	RJMP _0x20A0001
                 ; 0000 016F case '3': return 45;      //daca se introduce in terminal '3', functia returneaza o durata de 45 secunde (30% din ciclul de 2 minute si 30 sec)
                 _0xCE:
000163 33e3      	CPI  R30,LOW(0x33)
000164 f419      	BRNE _0xCF
000165 e2ed      	LDI  R30,LOW(45)
000166 e0f0      	LDI  R31,HIGH(45)
000167 c01b      	RJMP _0x20A0001
                 ; 0000 0170 case '4': return 60;      //daca se introduce in terminal '4', functia returneaza o durata de 60 secunde (40% din ciclul de 2 minute si 30 sec)
                 _0xCF:
000168 33e4      	CPI  R30,LOW(0x34)
000169 f419      	BRNE _0xD0
00016a e3ec      	LDI  R30,LOW(60)
00016b e0f0      	LDI  R31,HIGH(60)
00016c c016      	RJMP _0x20A0001
                 ; 0000 0171 case '5': return 75;      //daca se introduce in terminal '5', functia returneaza o durata de 75 secunde (50% din ciclul de 2 minute si 30 sec)
                 _0xD0:
00016d 33e5      	CPI  R30,LOW(0x35)
00016e f419      	BRNE _0xD1
00016f e4eb      	LDI  R30,LOW(75)
000170 e0f0      	LDI  R31,HIGH(75)
000171 c011      	RJMP _0x20A0001
                 ; 0000 0172 case '6': return 90;      //daca se introduce in terminal '6', functia returneaza o durata de 60 secunde (60% din ciclul de 2 minute si 30 sec)
                 _0xD1:
000172 33e6      	CPI  R30,LOW(0x36)
000173 f419      	BRNE _0xD2
000174 e5ea      	LDI  R30,LOW(90)
000175 e0f0      	LDI  R31,HIGH(90)
000176 c00c      	RJMP _0x20A0001
                 ; 0000 0173 case '7': return 105;     //daca se introduce in terminal '7', functia returneaza o durata de 60 secunde (70% din ciclul de 2 minute si 30 sec)
                 _0xD2:
000177 33e7      	CPI  R30,LOW(0x37)
000178 f419      	BRNE _0xD3
000179 e6e9      	LDI  R30,LOW(105)
00017a e0f0      	LDI  R31,HIGH(105)
00017b c007      	RJMP _0x20A0001
                 ; 0000 0174 case '8': return 120;     //daca se introduce in terminal '8', functia returneaza o durata de 60 secunde (80% din ciclul de 2 minute si 30 sec)
                 _0xD3:
00017c 33e8      	CPI  R30,LOW(0x38)
00017d f419      	BRNE _0xD5
00017e e7e8      	LDI  R30,LOW(120)
00017f e0f0      	LDI  R31,HIGH(120)
000180 c002      	RJMP _0x20A0001
                 ; 0000 0175 
                 ; 0000 0176 default : return 5;
                 _0xD5:
000181 e0e5      	LDI  R30,LOW(5)
000182 e0f0      	LDI  R31,HIGH(5)
                 ; 0000 0177 
                 ; 0000 0178 }
                 ; 0000 0179 }
                 _0x20A0001:
000183 9621      	ADIW R28,1
000184 9508      	RET
                 ; .FEND
                 ;void main (void)
                 ; 0000 017E {
                 _main:
                 ; .FSTART _main
                 ; 0000 017F unsigned char temp;
                 ; 0000 0180 //initializarea variabilelor prin care setam delay-uri
                 ; 0000 0181 int t_P=0, t_S2A=0, t_S2B=0, t_S1=0;
                 ; 0000 0182 int dif;
                 ; 0000 0183 int flag = 0;
                 ; 0000 0184 int i;
                 ; 0000 0185 
                 ; 0000 0186 
                 ; 0000 0187 char SS[4] = "";     //vector in care retinem caracterele introduse necesare setarii delay-ului
                 ; 0000 0188 int s=0;             //index cu care parcurgem vectorul
                 ; 0000 0189 
                 ; 0000 018A Init_initController();  // this must be the first "init" action/call!
000185 9760      	SBIW R28,16
000186 e180      	LDI  R24,16
000187 e0a0      	LDI  R26,LOW(0)
000188 e0b0      	LDI  R27,HIGH(0)
000189 e8ee      	LDI  R30,LOW(_0xD6*2)
00018a e0f0      	LDI  R31,HIGH(_0xD6*2)
00018b d17d      	RCALL __INITLOCB
                 ;	temp -> R17
                 ;	t_P -> R18,R19
                 ;	t_S2A -> R20,R21
                 ;	t_S2B -> Y+14
                 ;	t_S1 -> Y+12
                 ;	dif -> Y+10
                 ;	flag -> Y+8
                 ;	i -> Y+6
                 ;	SS -> Y+2
                 ;	s -> Y+0
                +
00018c e020     +LDI R18 , LOW ( 0 )
00018d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00018e e040     +LDI R20 , LOW ( 0 )
00018f e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000190 d0a5      	RCALL _Init_initController
                 ; 0000 018B #asm("sei")             // enable interrupts
000191 9478      	SEI
                 ; 0000 018C LED1 = 1;           	// initial state, will be changed by timer 1
000192 9a5e      	SBI  0xB,6
                 ; 0000 018D DDRB = 0xFF;         //setarea registrilor B si C ca output
000193 efef      	LDI  R30,LOW(255)
000194 b9e4      	OUT  0x4,R30
                 ; 0000 018E DDRC = 0xFF;
000195 b9e7      	OUT  0x7,R30
                 ; 0000 018F 
                 ; 0000 0190 PORTB = PORTC = 0x00;//LOW = 0 HIGH = 1        //toate led-urile controlate de pini din B si C sunt stinse
000196 e0e0      	LDI  R30,LOW(0)
000197 b9e8      	OUT  0x8,R30
000198 b9e5      	OUT  0x5,R30
                 ; 0000 0191 
                 ; 0000 0192 while(TRUE)
                 _0xD9:
                 ; 0000 0193 {
                 ; 0000 0194 wdogtrig();	        // call often else processor will reset
000199 95a8      	WDR
                 ; 0000 0195 if(rx_counter0)     // if a character is available on serial port USART0
00019a 2055      	TST  R5
00019b f409      	BRNE PC+2
00019c c097      	RJMP _0xDC
                 ; 0000 0196 {
                 ; 0000 0197 temp = getchar();
00019d df12      	RCALL _getchar
00019e 2f1e      	MOV  R17,R30
                 ; 0000 0198 if( temp ==  'A' ||  temp ==  'B'  || temp ==  'C'  || (temp >= '1' && temp <= '8'))
00019f 3411      	CPI  R17,65
0001a0 f049      	BREQ _0xDE
0001a1 3412      	CPI  R17,66
0001a2 f039      	BREQ _0xDE
0001a3 3413      	CPI  R17,67
0001a4 f029      	BREQ _0xDE
0001a5 3311      	CPI  R17,49
0001a6 f010      	BRLO _0xDF
0001a7 3319      	CPI  R17,57
0001a8 f008      	BRLO _0xDE
                 _0xDF:
0001a9 c077      	RJMP _0xDD
                 _0xDE:
                 ; 0000 0199 {
                 ; 0000 019A 
                 ; 0000 019B SS[s++] = temp;   //retinem in SS caracterele introduse, primul caracter e retinut in SS[0] iar s=0, urmatorul caracter este retinut
0001aa 81e8      	LD   R30,Y
0001ab 81f9      	LDD  R31,Y+1
0001ac 9631      	ADIW R30,1
0001ad 83e8      	ST   Y,R30
0001ae 83f9      	STD  Y+1,R31
0001af 9731      	SBIW R30,1
0001b0 01de      	MOVW R26,R28
0001b1 9612      	ADIW R26,2
0001b2 0fea      	ADD  R30,R26
0001b3 1ffb      	ADC  R31,R27
0001b4 8310      	ST   Z,R17
                 ; 0000 019C // in SS[1], iar s=1
                 ; 0000 019D if(s >= 2) {          //asigurare ca va rula codul chiar si atunci cand sunt introduse caractere in plus
0001b5 81a8      	LD   R26,Y
0001b6 81b9      	LDD  R27,Y+1
0001b7 9712      	SBIW R26,2
0001b8 f40c      	BRGE PC+2
0001b9 c066      	RJMP _0xE2
                 ; 0000 019E if (SS[0] == 'A' )    //compara codul ASCII
0001ba 81aa      	LDD  R26,Y+2
0001bb 34a1      	CPI  R26,LOW(0x41)
0001bc f449      	BRNE _0xE3
                 ; 0000 019F {   flag = 1;
0001bd d100      	RCALL SUBOPT_0x5
                 ; 0000 01A0 t_S2A = get_delay(SS[1]);    //retinem in t_S2A valoarea intoarsa de functia get_delay
0001be 01af      	MOVW R20,R30
                 ; 0000 01A1 dif = 123 - t_S2A;          //ciclul are 150 secunde, dar 27 sec sunt pierdute in cadrul fazelor
0001bf e7eb      	LDI  R30,LOW(123)
0001c0 e0f0      	LDI  R31,HIGH(123)
0001c1 1be4      	SUB  R30,R20
0001c2 0bf5      	SBC  R31,R21
0001c3 d100      	RCALL SUBOPT_0x6
                 ; 0000 01A2 t_S1 = dif/3;               //alegem ca timpul ramas sa fie distribuit in mod egal
                 ; 0000 01A3 t_P = dif/3;
                 ; 0000 01A4 t_S2B = dif/3;
0001c4 87ee      	STD  Y+14,R30
0001c5 87ff      	STD  Y+14+1,R31
                 ; 0000 01A5 
                 ; 0000 01A6 }
                 ; 0000 01A7 
                 ; 0000 01A8 
                 ; 0000 01A9 if (SS[0] == 'B' )
                 _0xE3:
0001c6 81aa      	LDD  R26,Y+2
0001c7 34a2      	CPI  R26,LOW(0x42)
0001c8 f441      	BRNE _0xE4
                 ; 0000 01AA {  flag = 1;
0001c9 d0f4      	RCALL SUBOPT_0x5
                 ; 0000 01AB t_S2B = get_delay(SS[1]);      //retinem in t_S2B valoarea intoarsa de functia get_delay
0001ca 87ee      	STD  Y+14,R30
0001cb 87ff      	STD  Y+14+1,R31
                 ; 0000 01AC dif = 123 - t_S2B;             //ciclul are 150 secunde, dar 27 sec sunt pierdute in cadrul fazelor
0001cc 85ae      	LDD  R26,Y+14
0001cd 85bf      	LDD  R27,Y+14+1
0001ce d10a      	RCALL SUBOPT_0x7
0001cf d0f4      	RCALL SUBOPT_0x6
                 ; 0000 01AD t_S1 = dif/3;                  //alegem ca timpul ramas sa fie distribuit in mod egal
                 ; 0000 01AE t_P =  dif/3;
                 ; 0000 01AF t_S2A = dif/3;
0001d0 01af      	MOVW R20,R30
                 ; 0000 01B0 
                 ; 0000 01B1 }
                 ; 0000 01B2 
                 ; 0000 01B3 
                 ; 0000 01B4 if (SS[0] == 'C' )
                 _0xE4:
0001d1 81aa      	LDD  R26,Y+2
0001d2 34a3      	CPI  R26,LOW(0x43)
0001d3 f479      	BRNE _0xE5
                 ; 0000 01B5 {   flag = 1;
0001d4 d0e9      	RCALL SUBOPT_0x5
                 ; 0000 01B6 t_S1 = get_delay(SS[1]);       //retinem in t_S1 valoarea intoarsa de functia get_delay
0001d5 87ec      	STD  Y+12,R30
0001d6 87fd      	STD  Y+12+1,R31
                 ; 0000 01B7 dif = 123 - t_S1;              //ciclul are 150 secunde, dar 27 sec sunt pierdute in cadrul fazelor
0001d7 85ac      	LDD  R26,Y+12
0001d8 85bd      	LDD  R27,Y+12+1
0001d9 d0ff      	RCALL SUBOPT_0x7
0001da 87ea      	STD  Y+10,R30
0001db 87fb      	STD  Y+10+1,R31
                 ; 0000 01B8 t_S2B = dif/3;                 //alegem ca timpul ramas sa fie distribuit in mod egal
0001dc d101      	RCALL SUBOPT_0x8
0001dd 87ee      	STD  Y+14,R30
0001de 87ff      	STD  Y+14+1,R31
                 ; 0000 01B9 t_P =  dif/3;
0001df d0fe      	RCALL SUBOPT_0x8
0001e0 019f      	MOVW R18,R30
                 ; 0000 01BA t_S2A = dif/3;
0001e1 d0fc      	RCALL SUBOPT_0x8
0001e2 01af      	MOVW R20,R30
                 ; 0000 01BB // printf("\n");
                 ; 0000 01BC // printf("%d\n", t_S1);
                 ; 0000 01BD // printf("%d\n", dif);
                 ; 0000 01BE 
                 ; 0000 01BF }
                 ; 0000 01C0 
                 ; 0000 01C1 if(flag) {           // verificam daca a fost scris un caracter de identificare a strazilor
                 _0xE5:
0001e3 85e8      	LDD  R30,Y+8
0001e4 85f9      	LDD  R31,Y+8+1
0001e5 9730      	SBIW R30,0
0001e6 f1c9      	BREQ _0xE6
                 ; 0000 01C2 
                 ; 0000 01C3 while(1) {        // am introdus ciclul intr-o bucla infinita pentru a asigura continuitatea acestuia
                 _0xE7:
                 ; 0000 01C4 
                 ; 0000 01C5 
                 ; 0000 01C6 etapa1();
0001e7 def6      	RCALL _etapa1
                 ; 0000 01C7 for(i=0; i< t_S1; i++){
0001e8 e0e0      	LDI  R30,LOW(0)
0001e9 83ee      	STD  Y+6,R30
0001ea 83ef      	STD  Y+6+1,R30
                 _0xEB:
0001eb 85ec      	LDD  R30,Y+12
0001ec 85fd      	LDD  R31,Y+12+1
0001ed d0f6      	RCALL SUBOPT_0x9
0001ee f42c      	BRGE _0xEC
                 ; 0000 01C8 delay_ms (1000);   //cat timp au verde masinile de pe strada 1 identificata prin 'C'
0001ef eea8      	LDI  R26,LOW(1000)
0001f0 e0b3      	LDI  R27,HIGH(1000)
0001f1 d148      	RCALL _delay_ms
                 ; 0000 01C9 }
0001f2 d0f6      	RCALL SUBOPT_0xA
0001f3 cff7      	RJMP _0xEB
                 _0xEC:
                 ; 0000 01CA etapa2();
0001f4 d0fa      	RCALL SUBOPT_0xB
                 ; 0000 01CB 
                 ; 0000 01CC delay_ms(3000);         //cat dureaza culoarea galben a semaforului de pe strada 1 ('C')
                 ; 0000 01CD 
                 ; 0000 01CE etapa3();
                 ; 0000 01CF for(i=0; i< t_S2B; i++){
0001f5 e0e0      	LDI  R30,LOW(0)
0001f6 83ee      	STD  Y+6,R30
0001f7 83ef      	STD  Y+6+1,R30
                 _0xEE:
0001f8 85ee      	LDD  R30,Y+14
0001f9 85ff      	LDD  R31,Y+14+1
0001fa d0e9      	RCALL SUBOPT_0x9
0001fb f42c      	BRGE _0xEF
                 ; 0000 01D0 
                 ; 0000 01D1 delay_ms(1000);  //cat timp au verde masinile de pe strada 2B (in acelasi timp pietonii de pe strada 1 au verde)
0001fc eea8      	LDI  R26,LOW(1000)
0001fd e0b3      	LDI  R27,HIGH(1000)
0001fe d13b      	RCALL _delay_ms
                 ; 0000 01D2 }
0001ff d0e9      	RCALL SUBOPT_0xA
000200 cff7      	RJMP _0xEE
                 _0xEF:
                 ; 0000 01D3 flash_PS1();         //semaforul pietonilor de pe strada 1 lumineaza intermitent cand acestia mai au putin timp pentru a traversa
000201 d0f2      	RCALL SUBOPT_0xC
                 ; 0000 01D4 
                 ; 0000 01D5 etapa4();
                 ; 0000 01D6 
                 ; 0000 01D7 etapa5();
                 ; 0000 01D8 
                 ; 0000 01D9 delay_ms(3000);     //cat dureaza culoarea galben a semaforului pe strada 2B
                 ; 0000 01DA 
                 ; 0000 01DB etapa6();
                 ; 0000 01DC for(i=0; i< t_P; i++){
000202 e0e0      	LDI  R30,LOW(0)
000203 83ee      	STD  Y+6,R30
000204 83ef      	STD  Y+6+1,R30
                 _0xF1:
000205 81ae      	LDD  R26,Y+6
000206 81bf      	LDD  R27,Y+6+1
000207 17a2      	CP   R26,R18
000208 07b3      	CPC  R27,R19
000209 f42c      	BRGE _0xF2
                 ; 0000 01DD 
                 ; 0000 01DE delay_ms(1000);   // semafoarele pietonilor de pe strazile 2A si 2B au culoarea verde
00020a eea8      	LDI  R26,LOW(1000)
00020b e0b3      	LDI  R27,HIGH(1000)
00020c d12d      	RCALL _delay_ms
                 ; 0000 01DF }
00020d d0db      	RCALL SUBOPT_0xA
00020e cff6      	RJMP _0xF1
                 _0xF2:
                 ; 0000 01E0 flash_PS2();          //semafoarele pietonilor de pe strazile 2A si 2B lumineaza intermitent cand acestia mai au putin timp pentru a traversa
00020f df2b      	RCALL _flash_PS2
                 ; 0000 01E1 
                 ; 0000 01E2 etapa7();
000210 def9      	RCALL _etapa7
                 ; 0000 01E3 for(i=0; i< t_S2A; i++){
000211 e0e0      	LDI  R30,LOW(0)
000212 83ee      	STD  Y+6,R30
000213 83ef      	STD  Y+6+1,R30
                 _0xF4:
000214 81ae      	LDD  R26,Y+6
000215 81bf      	LDD  R27,Y+6+1
000216 17a4      	CP   R26,R20
000217 07b5      	CPC  R27,R21
000218 f42c      	BRGE _0xF5
                 ; 0000 01E4 
                 ; 0000 01E5 delay_ms(1000);   // cat timp au verde masinile de pe strada 2A
000219 eea8      	LDI  R26,LOW(1000)
00021a e0b3      	LDI  R27,HIGH(1000)
00021b d11e      	RCALL _delay_ms
                 ; 0000 01E6 }
00021c d0cc      	RCALL SUBOPT_0xA
00021d cff6      	RJMP _0xF4
                 _0xF5:
                 ; 0000 01E7 etapa8();
00021e d0dc      	RCALL SUBOPT_0xD
                 ; 0000 01E8 
                 ; 0000 01E9 delay_ms(3000);         //cat dureaza culoarea galben a semaforului de pe strada 2A
                 ; 0000 01EA }
00021f cfc7      	RJMP _0xE7
                 ; 0000 01EB }
                 ; 0000 01EC 
                 ; 0000 01ED }
                 _0xE6:
                 ; 0000 01EE 
                 ; 0000 01EF 
                 ; 0000 01F0 }
                 _0xE2:
                 ; 0000 01F1 
                 ; 0000 01F2 else {           //in cazul in care sunt introduse alte caractere decat cele prin care sunt identificate strazile, am stabilit un ciclu implicit
000220 c013      	RJMP _0xF6
                 _0xDD:
                 ; 0000 01F3 while(1) {
                 _0xF7:
                 ; 0000 01F4 etapa1();
000221 debc      	RCALL _etapa1
                 ; 0000 01F5 
                 ; 0000 01F6 delay_ms(35000);
000222 eba8      	LDI  R26,LOW(35000)
000223 e8b8      	LDI  R27,HIGH(35000)
000224 d115      	RCALL _delay_ms
                 ; 0000 01F7 
                 ; 0000 01F8 etapa2();
000225 d0c9      	RCALL SUBOPT_0xB
                 ; 0000 01F9 
                 ; 0000 01FA delay_ms(3000);
                 ; 0000 01FB 
                 ; 0000 01FC etapa3();
                 ; 0000 01FD 
                 ; 0000 01FE delay_ms(35000);
000226 eba8      	LDI  R26,LOW(35000)
000227 e8b8      	LDI  R27,HIGH(35000)
000228 d111      	RCALL _delay_ms
                 ; 0000 01FF 
                 ; 0000 0200 flash_PS1();
000229 d0ca      	RCALL SUBOPT_0xC
                 ; 0000 0201 
                 ; 0000 0202 etapa4();
                 ; 0000 0203 
                 ; 0000 0204 etapa5();
                 ; 0000 0205 
                 ; 0000 0206 delay_ms(3000);
                 ; 0000 0207 
                 ; 0000 0208 etapa6();
                 ; 0000 0209 
                 ; 0000 020A delay_ms(18000);
00022a e5a0      	LDI  R26,LOW(18000)
00022b e4b6      	LDI  R27,HIGH(18000)
00022c d10d      	RCALL _delay_ms
                 ; 0000 020B 
                 ; 0000 020C flash_PS2();
00022d df0d      	RCALL _flash_PS2
                 ; 0000 020D 
                 ; 0000 020E etapa7();
00022e dedb      	RCALL _etapa7
                 ; 0000 020F 
                 ; 0000 0210 delay_ms(35000);
00022f eba8      	LDI  R26,LOW(35000)
000230 e8b8      	LDI  R27,HIGH(35000)
000231 d108      	RCALL _delay_ms
                 ; 0000 0211 
                 ; 0000 0212 etapa8();
000232 d0c8      	RCALL SUBOPT_0xD
                 ; 0000 0213 
                 ; 0000 0214 delay_ms(3000);
                 ; 0000 0215 }
000233 cfed      	RJMP _0xF7
                 ; 0000 0216 }
                 _0xF6:
                 ; 0000 0217 }
                 ; 0000 0218 
                 ; 0000 0219 
                 ; 0000 021A 
                 ; 0000 021B }
                 _0xDC:
000234 cf64      	RJMP _0xD9
                 ; 0000 021C 
                 ; 0000 021D 
                 ; 0000 021E }// end main loop
                 _0xFA:
000235 cfff      	RJMP _0xFA
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void Init_initController(void)
                 ; 0001 000B {
                 
                 	.CSEG
                 _Init_initController:
                 ; .FSTART _Init_initController
                 ; 0001 000C // Crystal Oscillator division factor: 1
                 ; 0001 000D #pragma optsize-
                 ; 0001 000E CLKPR=0x80;
000236 e8e0      	LDI  R30,LOW(128)
000237 93e0 0061 	STS  97,R30
                 ; 0001 000F CLKPR=0x00;
000239 e0e0      	LDI  R30,LOW(0)
00023a 93e0 0061 	STS  97,R30
                 ; 0001 0010 #ifdef _OPTIMIZE_SIZE_
                 ; 0001 0011 #pragma optsize+
                 ; 0001 0012 #endif
                 ; 0001 0013 
                 ; 0001 0014 // Input/Output Ports initialization
                 ; 0001 0015 // Port A initialization
                 ; 0001 0016 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 0017 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 0018 PORTA=0x00;
00023c b9e2      	OUT  0x2,R30
                 ; 0001 0019 DDRA=0x00;
00023d b9e1      	OUT  0x1,R30
                 ; 0001 001A 
                 ; 0001 001B // Port B initialization
                 ; 0001 001C PORTB=0x00;
00023e b9e5      	OUT  0x5,R30
                 ; 0001 001D DDRB=0x00;
00023f b9e4      	OUT  0x4,R30
                 ; 0001 001E 
                 ; 0001 001F // Port C initialization
                 ; 0001 0020 PORTC=0x00;
000240 b9e8      	OUT  0x8,R30
                 ; 0001 0021 DDRC=0x00;
000241 b9e7      	OUT  0x7,R30
                 ; 0001 0022 
                 ; 0001 0023 // Port D initialization
                 ; 0001 0024 PORTD=0b00100000; // D.5 needs pull-up resistor
000242 e2e0      	LDI  R30,LOW(32)
000243 b9eb      	OUT  0xB,R30
                 ; 0001 0025 DDRD= 0b01010000; // D.6 is LED, D.4 is test output
000244 e5e0      	LDI  R30,LOW(80)
000245 b9ea      	OUT  0xA,R30
                 ; 0001 0026 
                 ; 0001 0027 // Timer/Counter 0 initialization
                 ; 0001 0028 // Clock source: System Clock
                 ; 0001 0029 // Clock value: Timer 0 Stopped
                 ; 0001 002A // Mode: Normal top=FFh
                 ; 0001 002B // OC0 output: Disconnected
                 ; 0001 002C TCCR0A=0x00;
000246 e0e0      	LDI  R30,LOW(0)
000247 bde4      	OUT  0x24,R30
                 ; 0001 002D TCCR0B=0x00;
000248 bde5      	OUT  0x25,R30
                 ; 0001 002E TCNT0=0x00;
000249 bde6      	OUT  0x26,R30
                 ; 0001 002F OCR0A=0x00;
00024a bde7      	OUT  0x27,R30
                 ; 0001 0030 OCR0B=0x00;
00024b bde8      	OUT  0x28,R30
                 ; 0001 0031 
                 ; 0001 0032 // Timer/Counter 1 initialization
                 ; 0001 0033 // Clock source: System Clock
                 ; 0001 0034 // Clock value: 19.531 kHz = CLOCK/256
                 ; 0001 0035 // Mode: CTC top=OCR1A
                 ; 0001 0036 // OC1A output: Discon.
                 ; 0001 0037 // OC1B output: Discon.
                 ; 0001 0038 // Noise Canceler: Off
                 ; 0001 0039 // Input Capture on Falling Edge
                 ; 0001 003A // Timer 1 Overflow Interrupt: Off
                 ; 0001 003B // Input Capture Interrupt: Off
                 ; 0001 003C // Compare A Match Interrupt: On
                 ; 0001 003D // Compare B Match Interrupt: Off
                 ; 0001 003E 
                 ; 0001 003F TCCR1A=0x00;
00024c 93e0 0080 	STS  128,R30
                 ; 0001 0040 TCCR1B=0x0D;
00024e e0ed      	LDI  R30,LOW(13)
00024f 93e0 0081 	STS  129,R30
                 ; 0001 0041 TCNT1H=0x00;
000251 e0e0      	LDI  R30,LOW(0)
000252 93e0 0085 	STS  133,R30
                 ; 0001 0042 TCNT1L=0x00;
000254 93e0 0084 	STS  132,R30
                 ; 0001 0043 ICR1H=0x00;
000256 93e0 0087 	STS  135,R30
                 ; 0001 0044 ICR1L=0x00;
000258 93e0 0086 	STS  134,R30
                 ; 0001 0045 
                 ; 0001 0046 // 1 sec = 19531 counts = 4C41H counts, from 0 to 4C40
                 ; 0001 0047 // 4C40H = 4CH (MSB) and 40H (LSB)
                 ; 0001 0048 OCR1AH=0x4C;
00025a e4ec      	LDI  R30,LOW(76)
00025b 93e0 0089 	STS  137,R30
                 ; 0001 0049 OCR1AL=0x40;
00025d e4e0      	LDI  R30,LOW(64)
00025e 93e0 0088 	STS  136,R30
                 ; 0001 004A 
                 ; 0001 004B OCR1BH=0x00;
000260 e0e0      	LDI  R30,LOW(0)
000261 93e0 008b 	STS  139,R30
                 ; 0001 004C OCR1BL=0x00;
000263 93e0 008a 	STS  138,R30
                 ; 0001 004D 
                 ; 0001 004E // Timer/Counter 2 initialization
                 ; 0001 004F // Clock source: System Clock
                 ; 0001 0050 // Clock value: Timer2 Stopped
                 ; 0001 0051 // Mode: Normal top=0xFF
                 ; 0001 0052 // OC2A output: Disconnected
                 ; 0001 0053 // OC2B output: Disconnected
                 ; 0001 0054 ASSR=0x00;
000265 93e0 00b6 	STS  182,R30
                 ; 0001 0055 TCCR2A=0x00;
000267 93e0 00b0 	STS  176,R30
                 ; 0001 0056 TCCR2B=0x00;
000269 93e0 00b1 	STS  177,R30
                 ; 0001 0057 TCNT2=0x00;
00026b 93e0 00b2 	STS  178,R30
                 ; 0001 0058 OCR2A=0x00;
00026d 93e0 00b3 	STS  179,R30
                 ; 0001 0059 OCR2B=0x00;
00026f 93e0 00b4 	STS  180,R30
                 ; 0001 005A 
                 ; 0001 005B // External Interrupt(s) initialization
                 ; 0001 005C // INT0: Off
                 ; 0001 005D // INT1: Off
                 ; 0001 005E // INT2: Off
                 ; 0001 005F // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 0060 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0001 0061 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0001 0062 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0001 0063 EICRA=0x00;
000271 93e0 0069 	STS  105,R30
                 ; 0001 0064 EIMSK=0x00;
000273 bbed      	OUT  0x1D,R30
                 ; 0001 0065 PCICR=0x00;
000274 93e0 0068 	STS  104,R30
                 ; 0001 0066 
                 ; 0001 0067 // Timer/Counter 0,1,2 Interrupt(s) initialization
                 ; 0001 0068 TIMSK0=0x00;
000276 93e0 006e 	STS  110,R30
                 ; 0001 0069 TIMSK1=0x02;
000278 e0e2      	LDI  R30,LOW(2)
000279 93e0 006f 	STS  111,R30
                 ; 0001 006A TIMSK2=0x00;
00027b e0e0      	LDI  R30,LOW(0)
00027c 93e0 0070 	STS  112,R30
                 ; 0001 006B 
                 ; 0001 006C // USART0 initialization
                 ; 0001 006D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 006E // USART0 Receiver: On
                 ; 0001 006F // USART0 Transmitter: On
                 ; 0001 0070 // USART0 Mode: Asynchronous
                 ; 0001 0071 // USART0 Baud rate: 9600
                 ; 0001 0072 UCSR0A=0x00;
00027e 93e0 00c0 	STS  192,R30
                 ; 0001 0073 UCSR0B=0xD8;
000280 ede8      	LDI  R30,LOW(216)
000281 93e0 00c1 	STS  193,R30
                 ; 0001 0074 UCSR0C=0x06;
000283 e0e6      	LDI  R30,LOW(6)
000284 93e0 00c2 	STS  194,R30
                 ; 0001 0075 UBRR0H=0x00;
000286 e0e0      	LDI  R30,LOW(0)
000287 93e0 00c5 	STS  197,R30
                 ; 0001 0076 UBRR0L=0x81;
000289 e8e1      	LDI  R30,LOW(129)
00028a 93e0 00c4 	STS  196,R30
                 ; 0001 0077 
                 ; 0001 0078 // USART1 initialization
                 ; 0001 0079 // USART1 disabled
                 ; 0001 007A UCSR1B=0x00;
00028c e0e0      	LDI  R30,LOW(0)
00028d 93e0 00c9 	STS  201,R30
                 ; 0001 007B 
                 ; 0001 007C 
                 ; 0001 007D // Analog Comparator initialization
                 ; 0001 007E // Analog Comparator: Off
                 ; 0001 007F // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 0080 ACSR=0x80;
00028f e8e0      	LDI  R30,LOW(128)
000290 bfe0      	OUT  0x30,R30
                 ; 0001 0081 ADCSRB=0x00;
000291 e0e0      	LDI  R30,LOW(0)
000292 93e0 007b 	STS  123,R30
                 ; 0001 0082 DIDR1=0x00;
000294 93e0 007f 	STS  127,R30
                 ; 0001 0083 
                 ; 0001 0084 // Watchdog Timer initialization
                 ; 0001 0085 // Watchdog Timer Prescaler: OSC/2048
                 ; 0001 0086 #pragma optsize-
                 ; 0001 0087 #asm("wdr")
000296 95a8      	WDR
                 ; 0001 0088 // Write 2 consecutive values to enable watchdog
                 ; 0001 0089 // this is NOT a mistake !
                 ; 0001 008A WDTCSR=0x18;
000297 e1e8      	LDI  R30,LOW(24)
000298 93e0 0060 	STS  96,R30
                 ; 0001 008B WDTCSR=0x08;
00029a e0e8      	LDI  R30,LOW(8)
00029b 93e0 0060 	STS  96,R30
                 ; 0001 008C #ifdef _OPTIMIZE_SIZE_
                 ; 0001 008D #pragma optsize+
                 ; 0001 008E #endif
                 ; 0001 008F 
                 ; 0001 0090 }
00029d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer0:
000200           	.BYTE 0x8
                 _tx_buffer0:
000208           	.BYTE 0x8
                 __seed_G102:
000210           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00029e 93ea      	ST   -Y,R30
00029f 93fa      	ST   -Y,R31
0002a0 b7ef      	IN   R30,SREG
0002a1 93ea      	ST   -Y,R30
0002a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
0002a3 edac      	LDI  R26,LOW(1500)
0002a4 e0b5      	LDI  R27,HIGH(1500)
0002a5 d094      	RCALL _delay_ms
0002a6 9828      	CBI  0x5,0
0002a7 9a29      	SBI  0x5,1
0002a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0002a9 982a      	CBI  0x5,2
0002aa 9a2b      	SBI  0x5,3
0002ab 9841      	CBI  0x8,1
0002ac 9a42      	SBI  0x8,2
0002ad 9a2c      	SBI  0x5,4
0002ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
0002af 9828      	CBI  0x5,0
0002b0 9a29      	SBI  0x5,1
0002b1 982a      	CBI  0x5,2
0002b2 9a2b      	SBI  0x5,3
0002b3 982c      	CBI  0x5,4
0002b4 9a2d      	SBI  0x5,5
0002b5 982e      	CBI  0x5,6
0002b6 9a40      	SBI  0x8,0
0002b7 9a41      	SBI  0x8,1
0002b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002b9 e0f0      	LDI  R31,0
0002ba 018f      	MOVW R16,R30
                +
0002bb e020     +LDI R18 , LOW ( 0 )
0002bc e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0002bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x5:
0002be e0e1      	LDI  R30,LOW(1)
0002bf e0f0      	LDI  R31,HIGH(1)
0002c0 87e8      	STD  Y+8,R30
0002c1 87f9      	STD  Y+8+1,R31
0002c2 81ab      	LDD  R26,Y+3
0002c3 ce93      	RJMP _get_delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x6:
0002c4 87ea      	STD  Y+10,R30
0002c5 87fb      	STD  Y+10+1,R31
0002c6 85aa      	LDD  R26,Y+10
0002c7 85bb      	LDD  R27,Y+10+1
0002c8 e0e3      	LDI  R30,LOW(3)
0002c9 e0f0      	LDI  R31,HIGH(3)
0002ca d05c      	RCALL __DIVW21
0002cb 87ec      	STD  Y+12,R30
0002cc 87fd      	STD  Y+12+1,R31
0002cd 85aa      	LDD  R26,Y+10
0002ce 85bb      	LDD  R27,Y+10+1
0002cf e0e3      	LDI  R30,LOW(3)
0002d0 e0f0      	LDI  R31,HIGH(3)
0002d1 d055      	RCALL __DIVW21
0002d2 019f      	MOVW R18,R30
0002d3 85aa      	LDD  R26,Y+10
0002d4 85bb      	LDD  R27,Y+10+1
0002d5 e0e3      	LDI  R30,LOW(3)
0002d6 e0f0      	LDI  R31,HIGH(3)
0002d7 d04f      	RCALL __DIVW21
0002d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0002d9 e7eb      	LDI  R30,LOW(123)
0002da e0f0      	LDI  R31,HIGH(123)
0002db 1bea      	SUB  R30,R26
0002dc 0bfb      	SBC  R31,R27
0002dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
0002de 85aa      	LDD  R26,Y+10
0002df 85bb      	LDD  R27,Y+10+1
0002e0 e0e3      	LDI  R30,LOW(3)
0002e1 e0f0      	LDI  R31,HIGH(3)
0002e2 d044      	RCALL __DIVW21
0002e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0002e4 81ae      	LDD  R26,Y+6
0002e5 81bf      	LDD  R27,Y+6+1
0002e6 17ae      	CP   R26,R30
0002e7 07bf      	CPC  R27,R31
0002e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xA:
0002e9 81ee      	LDD  R30,Y+6
0002ea 81ff      	LDD  R31,Y+6+1
0002eb 9631      	ADIW R30,1
0002ec 83ee      	STD  Y+6,R30
0002ed 83ff      	STD  Y+6+1,R31
0002ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
0002ef ddf4      	RCALL _etapa2
0002f0 eba8      	LDI  R26,LOW(3000)
0002f1 e0bb      	LDI  R27,HIGH(3000)
0002f2 d047      	RCALL _delay_ms
0002f3 cdf7      	RJMP _etapa3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
0002f4 de2a      	RCALL _flash_PS1
0002f5 de03      	RCALL _etapa4
0002f6 de08      	RCALL _etapa5
0002f7 eba8      	LDI  R26,LOW(3000)
0002f8 e0bb      	LDI  R27,HIGH(3000)
0002f9 d040      	RCALL _delay_ms
0002fa ce06      	RJMP _etapa6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0002fb de18      	RCALL _etapa8
0002fc eba8      	LDI  R26,LOW(3000)
0002fd e0bb      	LDI  R27,HIGH(3000)
0002fe c03b      	RJMP _delay_ms
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
0002ff 933a      	ST   -Y,R19
                 __SAVELOCR3:
000300 932a      	ST   -Y,R18
                 __SAVELOCR2:
000301 931a      	ST   -Y,R17
000302 930a      	ST   -Y,R16
000303 9508      	RET
                 
                 __LOADLOCR4:
000304 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000305 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000306 8119      	LDD  R17,Y+1
000307 8108      	LD   R16,Y
000308 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000309 0fac      	ADD  R26,R28
00030a 1fbd      	ADC  R27,R29
                 __INITLOC0:
00030b 9005      	LPM  R0,Z+
00030c 920d      	ST   X+,R0
00030d 958a      	DEC  R24
00030e f7e1      	BRNE __INITLOC0
00030f 9508      	RET
                 
                 __ANEGW1:
000310 95f1      	NEG  R31
000311 95e1      	NEG  R30
000312 40f0      	SBCI R31,0
000313 9508      	RET
                 
                 __DIVW21U:
000314 2400      	CLR  R0
000315 2411      	CLR  R1
000316 e190      	LDI  R25,16
                 __DIVW21U1:
000317 0faa      	LSL  R26
000318 1fbb      	ROL  R27
000319 1c00      	ROL  R0
00031a 1c11      	ROL  R1
00031b 1a0e      	SUB  R0,R30
00031c 0a1f      	SBC  R1,R31
00031d f418      	BRCC __DIVW21U2
00031e 0e0e      	ADD  R0,R30
00031f 1e1f      	ADC  R1,R31
000320 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000321 60a1      	SBR  R26,1
                 __DIVW21U3:
000322 959a      	DEC  R25
000323 f799      	BRNE __DIVW21U1
000324 01fd      	MOVW R30,R26
000325 01d0      	MOVW R26,R0
000326 9508      	RET
                 
                 __DIVW21:
000327 d004      	RCALL __CHKSIGNW
000328 dfeb      	RCALL __DIVW21U
000329 f40e      	BRTC __DIVW211
00032a dfe5      	RCALL __ANEGW1
                 __DIVW211:
00032b 9508      	RET
                 
                 __CHKSIGNW:
00032c 94e8      	CLT
00032d fff7      	SBRS R31,7
00032e c002      	RJMP __CHKSW1
00032f dfe0      	RCALL __ANEGW1
000330 9468      	SET
                 __CHKSW1:
000331 ffb7      	SBRS R27,7
000332 c006      	RJMP __CHKSW2
000333 95b1      	NEG  R27
000334 95a1      	NEG  R26
000335 40b0      	SBCI R27,0
000336 f800      	BLD  R0,0
000337 9403      	INC  R0
000338 fa00      	BST  R0,0
                 __CHKSW2:
000339 9508      	RET
                 
                 _delay_ms:
00033a 9610      	adiw r26,0
00033b f039      	breq __delay_ms1
                 __delay_ms0:
00033c 95a8      	wdr
                +
00033d e888     +LDI R24 , LOW ( 0x1388 )
00033e e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
00033f 9701     +SBIW R24 , 1
000340 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
000341 9711      	sbiw r26,1
000342 f7c9      	brne __delay_ms0
                 __delay_ms1:
000343 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  14 r1 :   5 r2 :   4 r3 :   4 r4 :   0 r5 :   6 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   9 r17:  17 r18:  12 r19:  10 r20:   6 r21:   3 r22:   2 r23:   0 
r24:  11 r25:   5 r26:  59 r27:  42 r28:   6 r29:   2 r30: 198 r31:  55 
x  :   4 y  :  84 z  :  12 
Registers used: 25 out of 35 (71.4%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :   6 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   7 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  26 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :  34 cbr   :   1 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :   8 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   5 cpi   :  20 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   5 jmp   :  32 ld    :  12 ldd   :  35 ldi   : 140 
lds   :   2 lpm   :   8 lsl   :   1 lsr   :   0 mov   :   6 movw  :  12 
mul   :   0 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   0 
ori   :   0 out   :  29 pop   :   0 push  :   0 rcall :  75 ret   :  28 
reti  :   2 rjmp  :  38 rol   :   3 ror   :   0 sbc   :   3 sbci  :   7 
sbi   :  38 sbic  :   2 sbis  :   1 sbiw  :   9 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  18 std   :  27 sts   :  36 sub   :   3 subi  :   5 swap  :   0 
tst   :   3 wdr   :   4 
Instructions used: 56 out of 116 (48.3%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000688   1618     54   1672   16384  10.2%
[.dseg] 0x000100 0x000214      0     20     20    1024   2.0%
[.eseg] 0x000000 0x000001      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
