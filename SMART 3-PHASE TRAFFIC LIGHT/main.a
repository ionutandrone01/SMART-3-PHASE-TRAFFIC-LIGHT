;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;interrupt [21] void usart0_rx_isr(void)
; 0000 0049 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004A char status,data;
; 0000 004B status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 004C data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 004D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 004E {
; 0000 004F rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0050 #if RX_BUFFER_SIZE0 == 256
; 0000 0051 // special case for receiver buffer size=256
; 0000 0052 if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0053 #else
; 0000 0054 if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0055 if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0056 {
; 0000 0057 rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 0058 rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0059 }
; 0000 005A #endif
; 0000 005B }
;PCODE: $00000029 VOL: 0
; 0000 005C }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;char getchar(void)
; 0000 0063 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0064 char data;
; 0000 0065 while (rx_counter0==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0066 data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0067 #if RX_BUFFER_SIZE0 != 256
; 0000 0068 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0069 #endif
; 0000 006A #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 006B --rx_counter0;
;PCODE: $00000042 VOL: 0
; 0000 006C #asm("sei")
;PCODE: $00000043 VOL: 0
; 0000 006D return data;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 006E }
;PCODE: $00000047 VOL: 0
;interrupt [23] void usart0_tx_isr(void)
; 0000 007E {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007F if (tx_counter0)
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0080 {
; 0000 0081 --tx_counter0;
;PCODE: $0000004C VOL: 0
; 0000 0082 UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0083 #if TX_BUFFER_SIZE0 != 256
; 0000 0084 if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0085 #endif
; 0000 0086 }
;PCODE: $00000057 VOL: 0
; 0000 0087 }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;void putchar(char c)
; 0000 008E {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 008F while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $0000005E VOL: 0
;	c -> Y+0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0090 #asm("cli")
;PCODE: $00000065 VOL: 0
; 0000 0091 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0092 {
; 0000 0093 tx_buffer0[tx_wr_index0++]=c;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0094 #if TX_BUFFER_SIZE0 != 256
; 0000 0095 if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0096 #endif
; 0000 0097 ++tx_counter0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0098 }
; 0000 0099 else
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 009A UDR0=c;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 009B #asm("sei")
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 009C }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;interrupt [14] void timer1_compa_isr(void)
; 0000 00A9 {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00AA LED1 = ~LED1; // invert LED
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00AB }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;void etapa1()
; 0000 00AE {                      //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00AF LMS2A_V = LOW;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00B0 LMS2A_R = HIGH;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00B1 
; 0000 00B2 delay_ms(1500);  //LA TERMINAREA CICLULUI MAI INTAI SE FACE ROSU PE STRADA 2A IAR CULORILE CELORLALTE SEMAFOARE COMUTA DUPA O INTARZIERE DE 2 SECUNDE
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B3 //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSIE
; 0000 00B4 LPS1_V = LOW;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B5 LPS1_R = HIGH;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B6 //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSIE
; 0000 00B7 LPS2_V = LOW;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B8 LPS2_R = HIGH;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B9 //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA ROSIE
; 0000 00BA LMS2B_V = LOW;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00BB LMS2B_R = HIGH;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00BC //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
; 0000 00BD LMS1_V = HIGH;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00BE LMS1_R = LOW;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00BF }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;void etapa2()
; 0000 00C2 {                      //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C3 LMS2A_V = LOW;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00C4 LMS2A_R = HIGH;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00C5 //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSIE
; 0000 00C6 LPS1_V = LOW;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00C7 LPS1_R = HIGH;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00C8 //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSIE
; 0000 00C9 LPS2_V = LOW;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00CA LPS2_R = HIGH;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00CB //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA ROSIE
; 0000 00CC LMS2B_V = LOW;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00CD LMS2B_R = HIGH;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00CE //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA GABLBEN
; 0000 00CF LMS1_V = HIGH;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00D0 LMS1_R = HIGH;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00D1 }
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;void etapa3()
; 0000 00D4 {                       //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00D5 LMS1_V = LOW;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00D6 LMS1_R = HIGH;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00D7 
; 0000 00D8 delay_ms(1500);  //DUPA CE SE FACE ROSU PE STRADA 1, CULORILE CELORLALTE SEMAFOARE COMUTA DUPA 2 SECUNDE
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00D9 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
; 0000 00DA LMS2A_V = LOW;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00DB LMS2A_R = HIGH;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00DC //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA VERDE
; 0000 00DD LPS1_V = HIGH;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00DE LPS1_R = LOW;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00DF //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSIE
; 0000 00E0 LPS2_V = LOW;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00E1 LPS2_R = HIGH;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00E2 //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA VERDE
; 0000 00E3 LMS2B_V = HIGH;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00E4 LMS2B_R = LOW;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00E5 
; 0000 00E6 }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;void etapa4()
; 0000 00E9 {                       //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSU
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00EA LPS1_V = LOW;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00EB LPS1_R = HIGH;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00EC //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSU
; 0000 00ED LPS2_V = LOW;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00EE LPS2_R = HIGH;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00EF //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
; 0000 00F0 LMS1_V = LOW;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00F1 LMS1_R = HIGH;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00F2 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
; 0000 00F3 LMS2A_V = LOW;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00F4 LMS2A_R = HIGH;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00F5 
; 0000 00F6 //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA VERDE
; 0000 00F7 LMS2B_V = HIGH;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00F8 LMS2B_R = LOW;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00F9 
; 0000 00FA delay_ms(4000);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00FB }
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;void etapa5()
; 0000 00FF {                       //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSU
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0100 LPS1_V = LOW;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0101 LPS1_R = HIGH;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0102 //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSU
; 0000 0103 LPS2_V = LOW;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0104 LPS2_R = HIGH;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0105 //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
; 0000 0106 LMS1_V = LOW;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0107 LMS1_R = HIGH;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0108 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
; 0000 0109 LMS2A_V = LOW;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 010A LMS2A_R = HIGH;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 010B 
; 0000 010C //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA GALBEN
; 0000 010D LMS2B_V = HIGH;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 010E LMS2B_R = HIGH;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 010F }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;void etapa6()
; 0000 0112 {                        //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA ROSIE
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0113 LMS2B_V = LOW;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0114 LMS2B_R = HIGH;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0115 
; 0000 0116 delay_ms(1500);   //DUPA CE SE FACE ROSU PE STRADA 2B, CULORILE CELORLALTE SEMAFOARE COMUTA DUPA 2 SECUNDE
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0117 //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSU
; 0000 0118 LPS1_V = LOW;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0119 LPS1_R = HIGH;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 011A //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA VERDE
; 0000 011B LPS2_V = HIGH;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 011C LPS2_R = LOW;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 011D //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
; 0000 011E LMS1_V = LOW;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 011F LMS1_R = HIGH;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0120 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA ROSIE
; 0000 0121 LMS2A_V = LOW;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0122 LMS2A_R = HIGH;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0123 }
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;void etapa7()
; 0000 0126 {                      //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSU
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0127 LPS2_V = LOW;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0128 LPS2_R = HIGH;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0129 
; 0000 012A delay_ms(1500);  //DUPA CE SE FACE ROSU LA PIETONII DE PE STRADA 2, CULORILE CELORLALTE SEMAFOARE COMUTA DUPA 2 SECUNDE
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 012B //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSU
; 0000 012C LPS1_V = LOW;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 012D LPS1_R = HIGH;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 012E //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
; 0000 012F LMS1_V = LOW;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0130 LMS1_R = HIGH;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0131 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA VERDE
; 0000 0132 LMS2A_V = HIGH;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0133 LMS2A_R = LOW;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0134 //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA ROSIE
; 0000 0135 LMS2B_V = LOW;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0136 LMS2B_R = HIGH;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0137 }
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;void etapa8()
; 0000 013A {                       //SEMAFOARELE PE STRADA 2 PENTRU PIETONI AU CULOAREA ROSU
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 013B LPS2_V = LOW;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 013C LPS2_R = HIGH;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 013D //SEMAFOARELE PE STRADA 1 PENTRU PIETONI AU CULOAREA ROSU
; 0000 013E LPS1_V = LOW;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 013F LPS1_R = HIGH;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0140 //SEMAFORUL PE STRADA 1 PENTRU MASINI ARE CULOAREA ROSIE
; 0000 0141 LMS1_V = LOW;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0142 LMS1_R = HIGH;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0143 //SEMAFORUL PE STRADA 2B PENTRU MASINI ARE CULOAREA ROSIE
; 0000 0144 LMS2B_V = LOW;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0145 LMS2B_R = HIGH;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0146 //SEMAFORUL PE STRADA 2A PENTRU MASINI ARE CULOAREA GALBEN
; 0000 0147 LMS2A_V = HIGH;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0148 LMS2A_R = HIGH;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0149 }
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;void flash_PS1()
; 0000 014E //cand timpul pentru traversare este aproape de final
; 0000 014F {
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0150 int initialState = LPS1_V;   //retinem starea culorii verzi a semafoarelor pentru pietonii de pe strada 1
; 0000 0151 int i = 0;
; 0000 0152 for(i = 0 ; i < 4; i++)     //prin parcurgerea buclei for asiguram aprinderea si stingerea led-ului de 4 ori
;PCODE: $0000015D VOL: 0
;	initialState -> R16,R17
;	i -> R18,R19
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0153 {
; 0000 0154 LPS1_V = LOW;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0155 delay_ms(500);
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0156 LPS1_V = HIGH;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0157 delay_ms(500);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0158 }
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0159 LPS1_V = initialState;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 015A }
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;void flash_PS2()
; 0000 015D //cand timpul pentru traversare este aproape de final
; 0000 015E {
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 015F int initialState = LPS2_V;   //retinem starea culorii verzi a semafoarelor pentru pietonii de pe strada 2
; 0000 0160 int i;
; 0000 0161 for(i = 0 ; i < 4; i++)     //prin parcurgerea buclei for asiguram aprinderea si stingerea led-ului de 4 ori
;PCODE: $00000189 VOL: 0
;	initialState -> R16,R17
;	i -> R18,R19
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0162 {
; 0000 0163 LPS2_V = LOW;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0164 delay_ms(500);
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0165 LPS2_V = HIGH;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0166 delay_ms(500);
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0167 }
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0168 LPS2_V = initialState;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0169 }
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;int get_delay (char arg) {
; 0000 016B int get_delay (char arg) {
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 016C switch(arg) {               //switch-ul functioneaza doar cu numere, iar noi chiar daca ii dam un caracter, el o sa foloseasca coduri ASCII
;PCODE: $000001B3 VOL: 0
;	arg -> Y+0
;PCODE: $000001B4 VOL: 0
; 0000 016D case '1': return 15;      //daca se introduce in terminal '1', functia returneaza o durata de 15 secunde (10% din ciclul de 2 minute si 30 sec = 150 sec)
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 016E case '2': return 30;      //daca se introduce in terminal '2', functia returneaza o durata de 30 secunde (20% din ciclul de 2 minute si 30 sec)
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 016F case '3': return 45;      //daca se introduce in terminal '3', functia returneaza o durata de 45 secunde (30% din ciclul de 2 minute si 30 sec)
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0170 case '4': return 60;      //daca se introduce in terminal '4', functia returneaza o durata de 60 secunde (40% din ciclul de 2 minute si 30 sec)
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0171 case '5': return 75;      //daca se introduce in terminal '5', functia returneaza o durata de 75 secunde (50% din ciclul de 2 minute si 30 sec)
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0172 case '6': return 90;      //daca se introduce in terminal '6', functia returneaza o durata de 60 secunde (60% din ciclul de 2 minute si 30 sec)
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0173 case '7': return 105;     //daca se introduce in terminal '7', functia returneaza o durata de 60 secunde (70% din ciclul de 2 minute si 30 sec)
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0174 case '8': return 120;     //daca se introduce in terminal '8', functia returneaza o durata de 60 secunde (80% din ciclul de 2 minute si 30 sec)
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0175 
; 0000 0176 default : return 5;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 0177 
; 0000 0178 }
;PCODE: $000001E8 VOL: 0
; 0000 0179 }
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;void main (void)
; 0000 017E {
;PCODE: $000001EC VOL: 0
; 0000 017F unsigned char temp;
; 0000 0180 //initializarea variabilelor prin care setam delay-uri
; 0000 0181 int t_P=0, t_S2A=0, t_S2B=0, t_S1=0;
; 0000 0182 int dif;
; 0000 0183 int flag = 0;
; 0000 0184 int i;
; 0000 0185 
; 0000 0186 
; 0000 0187 char SS[4] = "";     //vector in care retinem caracterele introduse necesare setarii delay-ului
; 0000 0188 int s=0;             //index cu care parcurgem vectorul
; 0000 0189 
; 0000 018A Init_initController();  // this must be the first "init" action/call!
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;	temp -> R17
;	t_P -> R18,R19
;	t_S2A -> R20,R21
;	t_S2B -> Y+14
;	t_S1 -> Y+12
;	dif -> Y+10
;	flag -> Y+8
;	i -> Y+6
;	SS -> Y+2
;	s -> Y+0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 018B #asm("sei")             // enable interrupts
;PCODE: $000001F7 VOL: 0
; 0000 018C LED1 = 1;           	// initial state, will be changed by timer 1
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 018D DDRB = 0xFF;         //setarea registrilor B si C ca output
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 018E DDRC = 0xFF;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 018F 
; 0000 0190 PORTB = PORTC = 0x00;//LOW = 0 HIGH = 1        //toate led-urile controlate de pini din B si C sunt stinse
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0191 
; 0000 0192 while(TRUE)
;PCODE: $00000201 VOL: 0
; 0000 0193 {
; 0000 0194 wdogtrig();	        // call often else processor will reset
;PCODE: $00000202 VOL: 0
; 0000 0195 if(rx_counter0)     // if a character is available on serial port USART0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0196 {
; 0000 0197 temp = getchar();
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0198 if( temp ==  'A' ||  temp ==  'B'  || temp ==  'C'  || (temp >= '1' && temp <= '8'))
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0199 {
; 0000 019A 
; 0000 019B SS[s++] = temp;   //retinem in SS caracterele introduse, primul caracter e retinut in SS[0] iar s=0, urmatorul caracter este retinut
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 019C // in SS[1], iar s=1
; 0000 019D if(s >= 2) {          //asigurare ca va rula codul chiar si atunci cand sunt introduse caractere in plus
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 019E if (SS[0] == 'A' )    //compara codul ASCII
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 019F {   flag = 1;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 01A0 t_S2A = get_delay(SS[1]);    //retinem in t_S2A valoarea intoarsa de functia get_delay
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 01A1 dif = 123 - t_S2A;          //ciclul are 150 secunde, dar 27 sec sunt pierdute in cadrul fazelor
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 01A2 t_S1 = dif/3;               //alegem ca timpul ramas sa fie distribuit in mod egal
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 01A3 t_P = dif/3;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 01A4 t_S2B = dif/3;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 01A5 
; 0000 01A6 }
; 0000 01A7 
; 0000 01A8 
; 0000 01A9 if (SS[0] == 'B' )
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 01AA {  flag = 1;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 01AB t_S2B = get_delay(SS[1]);      //retinem in t_S2B valoarea intoarsa de functia get_delay
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 01AC dif = 123 - t_S2B;             //ciclul are 150 secunde, dar 27 sec sunt pierdute in cadrul fazelor
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 01AD t_S1 = dif/3;                  //alegem ca timpul ramas sa fie distribuit in mod egal
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 01AE t_P =  dif/3;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 01AF t_S2A = dif/3;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 01B0 
; 0000 01B1 }
; 0000 01B2 
; 0000 01B3 
; 0000 01B4 if (SS[0] == 'C' )
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 01B5 {   flag = 1;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 01B6 t_S1 = get_delay(SS[1]);       //retinem in t_S1 valoarea intoarsa de functia get_delay
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 01B7 dif = 123 - t_S1;              //ciclul are 150 secunde, dar 27 sec sunt pierdute in cadrul fazelor
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 01B8 t_S2B = dif/3;                 //alegem ca timpul ramas sa fie distribuit in mod egal
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 01B9 t_P =  dif/3;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 01BA t_S2A = dif/3;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 01BB // printf("\n");
; 0000 01BC // printf("%d\n", t_S1);
; 0000 01BD // printf("%d\n", dif);
; 0000 01BE 
; 0000 01BF }
; 0000 01C0 
; 0000 01C1 if(flag) {           // verificam daca a fost scris un caracter de identificare a strazilor
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 01C2 
; 0000 01C3 while(1) {        // am introdus ciclul intr-o bucla infinita pentru a asigura continuitatea acestuia
;PCODE: $00000271 VOL: 0
; 0000 01C4 
; 0000 01C5 
; 0000 01C6 etapa1();
;PCODE: $00000272 VOL: 0
; 0000 01C7 for(i=0; i< t_S1; i++){
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 01C8 delay_ms (1000);   //cat timp au verde masinile de pe strada 1 identificata prin 'C'
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 01C9 }
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 01CA etapa2();
;PCODE: $00000286 VOL: 0
; 0000 01CB 
; 0000 01CC delay_ms(3000);         //cat dureaza culoarea galben a semaforului de pe strada 1 ('C')
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 01CD 
; 0000 01CE etapa3();
;PCODE: $00000289 VOL: 0
; 0000 01CF for(i=0; i< t_S2B; i++){
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 01D0 
; 0000 01D1 delay_ms(1000);  //cat timp au verde masinile de pe strada 2B (in acelasi timp pietonii de pe strada 1 au verde)
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 01D2 }
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 01D3 flash_PS1();         //semaforul pietonilor de pe strada 1 lumineaza intermitent cand acestia mai au putin timp pentru a traversa
;PCODE: $0000029D VOL: 0
; 0000 01D4 
; 0000 01D5 etapa4();
;PCODE: $0000029E VOL: 0
; 0000 01D6 
; 0000 01D7 etapa5();
;PCODE: $0000029F VOL: 0
; 0000 01D8 
; 0000 01D9 delay_ms(3000);     //cat dureaza culoarea galben a semaforului pe strada 2B
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 01DA 
; 0000 01DB etapa6();
;PCODE: $000002A2 VOL: 0
; 0000 01DC for(i=0; i< t_P; i++){
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 01DD 
; 0000 01DE delay_ms(1000);   // semafoarele pietonilor de pe strazile 2A si 2B au culoarea verde
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 01DF }
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 01E0 flash_PS2();          //semafoarele pietonilor de pe strazile 2A si 2B lumineaza intermitent cand acestia mai au putin timp pentru a traversa
;PCODE: $000002B5 VOL: 0
; 0000 01E1 
; 0000 01E2 etapa7();
;PCODE: $000002B6 VOL: 0
; 0000 01E3 for(i=0; i< t_S2A; i++){
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 01E4 
; 0000 01E5 delay_ms(1000);   // cat timp au verde masinile de pe strada 2A
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01E6 }
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 01E7 etapa8();
;PCODE: $000002C9 VOL: 0
; 0000 01E8 
; 0000 01E9 delay_ms(3000);         //cat dureaza culoarea galben a semaforului de pe strada 2A
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 01EA }
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 01EB }
; 0000 01EC 
; 0000 01ED }
;PCODE: $000002CE VOL: 0
; 0000 01EE 
; 0000 01EF 
; 0000 01F0 }
;PCODE: $000002CF VOL: 0
; 0000 01F1 
; 0000 01F2 else {           //in cazul in care sunt introduse alte caractere decat cele prin care sunt identificate strazile, am stabilit un ciclu implicit
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 01F3 while(1) {
;PCODE: $000002D2 VOL: 0
; 0000 01F4 etapa1();
;PCODE: $000002D3 VOL: 0
; 0000 01F5 
; 0000 01F6 delay_ms(35000);
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01F7 
; 0000 01F8 etapa2();
;PCODE: $000002D6 VOL: 0
; 0000 01F9 
; 0000 01FA delay_ms(3000);
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 01FB 
; 0000 01FC etapa3();
;PCODE: $000002D9 VOL: 0
; 0000 01FD 
; 0000 01FE delay_ms(35000);
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 01FF 
; 0000 0200 flash_PS1();
;PCODE: $000002DC VOL: 0
; 0000 0201 
; 0000 0202 etapa4();
;PCODE: $000002DD VOL: 0
; 0000 0203 
; 0000 0204 etapa5();
;PCODE: $000002DE VOL: 0
; 0000 0205 
; 0000 0206 delay_ms(3000);
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 0207 
; 0000 0208 etapa6();
;PCODE: $000002E1 VOL: 0
; 0000 0209 
; 0000 020A delay_ms(18000);
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 020B 
; 0000 020C flash_PS2();
;PCODE: $000002E4 VOL: 0
; 0000 020D 
; 0000 020E etapa7();
;PCODE: $000002E5 VOL: 0
; 0000 020F 
; 0000 0210 delay_ms(35000);
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 0211 
; 0000 0212 etapa8();
;PCODE: $000002E8 VOL: 0
; 0000 0213 
; 0000 0214 delay_ms(3000);
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 0215 }
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 0216 }
;PCODE: $000002ED VOL: 0
; 0000 0217 }
; 0000 0218 
; 0000 0219 
; 0000 021A 
; 0000 021B }
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 021C 
; 0000 021D 
; 0000 021E }// end main loop
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
